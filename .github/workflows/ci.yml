---
name: CI

on:
  pull_request:
  push:
    tags:
      - '*'
    branches:
      - '*' 

permissions:
  contents: read
  pull-requests: write
  deployments: write
  checks: write

jobs:
  lint_and_test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - uses: actions/checkout@v5

      # Determine the branch name
      - name: Set branch name for blueprint URL
        shell: bash
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            echo "BRANCH_NAME=${GITHUB_HEAD_REF}" >> $GITHUB_ENV
          else
            echo "BRANCH_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          fi

      # Replace main.zip with <BRANCH_NAME>.zip in blueprint.json
      - name: Patch blueprint.json with branch ZIP
        run: |
          sed -i "s|refs/heads/main.zip|refs/heads/${BRANCH_NAME}.zip|g" blueprint.json

      # Convert blueprint.json to Base64, because github not processes well json in urls
      - name: Encode blueprint for Playground
        id: blueprint
        run: |
          # Base64-encode the blueprint (no line wraps)
          BASE64_BLUEPRINT=$(base64 -w 0 blueprint.json)
          echo "BASE64_BLUEPRINT=$BASE64_BLUEPRINT" >> $GITHUB_ENV

      # Show final Playground URL in the Summary
      - name: Add Playground URL to summary
        run: |
          echo "[Test in WP Playground](https://playground.wordpress.net/#${BASE64_BLUEPRINT})" >> $GITHUB_STEP_SUMMARY

      # Create a GitHub Check Run with the Playground URL
      - name: Create a check with a test link
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const encodedBlueprint = process.env.BASE64_BLUEPRINT;
            const playgroundUrl = `https://playground.wordpress.net/#${encodedBlueprint}`;
            github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: "Test on WP playground",
              head_sha: context.payload.pull_request ? context.payload.pull_request.head.sha : context.sha,
              status: "completed",
              conclusion: "neutral",
              output: {
                title: "Test in WP playground",
                summary: `[Test in WP Playground](${playgroundUrl})`
              }
            });

      # Create a deployment with the Playground URL
      - name: Create a deployment
        uses: actions/github-script@v8
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const encodedBlueprint = process.env.BASE64_BLUEPRINT;
            const playgroundUrl = `https://playground.wordpress.net/#${encodedBlueprint}`;

            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.pull_request ? context.payload.pull_request.head.ref : context.ref,
              required_contexts: [],
              environment: "playground",
              transient_environment: true,
              auto_merge: false,
              description: "WordPress Playground Deployment"
            });

            if (deployment.data.id) {
              await github.rest.repos.createDeploymentStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                deployment_id: deployment.data.id,
                state: "success",
                environment_url: playgroundUrl,
                description: "Playground environment ready"
              });
            }



      - name: Pre-pull Docker images
        run: |
          docker pull mariadb:lts
          docker pull wordpress
          docker pull wordpress:cli

      - name: PHP setup
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'  # Adjust the version according to your needs
          extensions: mbstring, intl, curl, dom, json, pdo, mysql, xml, zip

      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist

      - name: Install gettext
        run: sudo apt-get install -y gettext

      - name: Check untranslated strings
        run: make check-untranslated

      # Install wp-env globally
      - name: Setup wp-env
        run: npm -g --no-fund i @wordpress/env

      # Start wp-env environment
      - name: Start wp-env
        run: make up

      - name: Run code linting
        run: make lint

      - name: Run plugin check
        run: make check-plugin

      - name: Run unit tests
        run: make test


